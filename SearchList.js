import React, { Component } from 'react';
import { View, Text, FlatList, TextInput, ListItem} from 'react-native';

{
  // Далее был реализован класс "SearchFunction", который позволяет по надписи, которую мы вводим в "окно поиска" выдавать те значения, которые удовлетворяют условиям (в нашем случае это символ или очередность символов).
}

class SearchFunction extends Component {
  constructor(props) {
    super(props);

    {
      // Далее создадим пустой список. Это нужно для того, чтобы при вводе туда какого-либо значения ( в нашем случае буквы) этот список сравнивал значения, которые есть в другом, уже заполненном списке и выдавал нужные значения.
    }

    this.state = {
      data: [],
      value: '',
    };

    {
      // Создаем список, в который будем вносить данные (как говорилось ранее, это будет наш "заполенный список").
    }

    this.arrayNew = [
      { name: 'Программист на Python (от 70000 рублей)' },
      { name: 'Шахтер (от 60000 рублей)' },
      { name: 'Менеджер (от 65000 рублей)' },
      { name: 'Старший менеджер (от 93000 рублей)' },
      { name: 'Разнорабочий (от 28000 рублей)' },
      { name: 'Грузчик (от 26000 рублей)' },
      { name: 'Терапевт (от 51000 рублей)' },
      { name: 'Стоматолог (от 76000 рублей)' },
      { name: 'Секретарь (от 65000 рублей)' },
      { name: 'Бухгалтер (от 88000 рублей)' },
      { name: 'Главный бухгалтер (от 109000 рублей)' },
      { name: 'Директор (от 135000 рублей)' },
      { name: 'Программист на HTML (от 70000 рублей)' },
      { name: 'Шофер (от 48000 рублей)' },
      { name: 'Таксист (от 35000 рублей)' },
      { name: 'Слесарь (от 42000 рублей)' },
      { name: 'Аналитик (от 51000 рублей)' },
      { name: 'Продавец-консультант (от 29000 рублей)' },
      { name: 'Кассир (от 34000 рублей)' },
      { name: 'Машинист электропоезда (от 79000 рублей)' },
      { name: 'Машинист метрополитена (от 62000 рублей)' },
      { name: 'Токарь (от 105000 рублей)' },
      { name: 'Кондитер (от 64000 рублей)' },
      { name: 'Повар (от 41000 рублей)' },
      { name: 'Официант (от 32000 рублей)' },
      { name: 'Бармен (от 65000 рублей)' },
      { name: 'Пилот (от 180000 рублей)' },
      { name: 'Стюардесса (от 125000 рублей)' },
      { name: 'Парикмахер (от 52000 рублей)' },
      { name: 'Барбер (от 60000 рублей)' },
      { name: 'Курьер (от 27000 рублей)' },
      { name: 'Пиццеол (от 55000 рублей)' },
      { name: 'Берейтор (от 48000 рублей)' },
      { name: 'Монтажник (от 50000 рублей)' },
      { name: 'Электромонтажник (от 60000 рублей)' },
    ];
  }

  renderSeparator = () => {
    return (
      <View
        style = {{ // Создадим полоску - разграничитель (на случай, если по заданному в "окне поиска" значению находится сразу несколько значений).
          height: 3,
          width: '100%',
          backgroundColor: 'black', 
        }}
      />

    );
  };

  searchItems = text => { // Релизуем метод, который будет отвечать за выдачу пользователю нужных значений из "заполенного списка" в виде некого столбика. ПОдходящие значения будут оставаться, а неподходящие пропадать.
    let newData = this.arrayNew.filter(item => {
      const itemData = `${item.name.toUpperCase()}`;
      const textData = text.toUpperCase();
        if(text.length > 0 ){
          return itemData.indexOf(textData) > -1;
        }
    });

    this.setState({ // Непросредственно запоминание программой значения, которое пользователь ввел в "окно поиска" для дальнейшей обработки.
      data: newData,
      value: text,
    });
  };

  renderHeader = () => { // Далее напишем графическую часть нашего "окна поиска"
    return (
      
      <TextInput
        style = {{ 
          height: 50, // Ширина.
          borderColor: '#000',  // Цвет границ.
          borderWidth: 2,  // Толщина границ.
          borderRadius: '10px', // Радиус границ по углам.
          textAlign: 'center' // Выравнивание "окна поиска".
        }}
        placeholder = "Найти вакансию.." // Текст внутри "окна поиска".
        placeholderFontWeight = 'bold' // Шрифт.
        placeholderTextColor = "black" // Цвет, вводимого в "окно поиска".
        onChangeText = {text => this.searchItems(text)} // Функция запоминания программой текста, введенного в "окно поиска".
        value = {this.state.value}
      />

    );
  };

  render() {
    return (

      <View // Внешний вид окна приложения.
        style = {{
          flex: 1,
          padding: 25,
          width: '98%',
          alignSelf: 'center',
          justifyContent: 'center',
          backgroundColor: 'rgb(0, 152, 250)'
        }}>

        <FlatList // Графическая часть текста (подходящих вакансий), выдаваемого приложением по значению из "оуна поиска".
          data = {this.state.data}
          renderItem = {({ item }) => (
            <Text style = {{ padding: 20, fontWeight: 'bold'}}> {item.name} 
            </Text>
          )}
          keyExtractor = {item => item.name}
          ItemSeparatorComponent = {this.renderSeparator}
          ListHeaderComponent = {this.renderHeader}
        />

      </View>

    );
  }
}

export default SearchFunction;
